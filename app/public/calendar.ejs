<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>

    <style>
        .container {
            display: flex;
            width: 100%;
            height: 100vh;
            overflow-y: hidden;
        }

        /* Sidebar styles */
        .sidebar {
            position: relative;
            width: 15%;
            background-color: #f7f7f7;
            padding: 20px;
            border-right: 1px solid #ddd;
            height: 100vh;
            overflow-y: auto;
        }

        .selected {
            font-weight: bold;
            background-color: #eee;
        }

        .sidebar-header {
            height: 4%;
        }

        #toggleSidebar {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
        }


        .sidebar-collapsed {
            width: 50px !important;
            overflow: hidden;
        }

        #createCalendarBtn {
            display: block;
            background-color: #4285f4;
            color: #fff;
            border: none;
            padding: 10px 20px;
            margin-bottom: 20px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 16px;
        }

        #createCalendarBtn:hover {
            background-color: #357ab8;
        }

        .sidebar.hide-content .sidebar-content {
            display: none;
        }

        .sidebar-userAllCalendars {
            display: flex;
            flex-direction: column;
            gap: 15px;
            list-style-type: none;
            padding: 0;
            margin: 0;
        }


        /* Calendar styles */


        .calendar-container {
            width: 85%;
            overflow-y: auto;
            height: calc(100vh - 60px);
            padding-left: 10px;
        }

        .calendar-message {
            display: none;
            padding: 15px;
            width: 80%;
            height: 25px;
            border-radius: 5px;
        }

        #calendar {
            max-width: 100%;
            margin: 0 auto;
        }


        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
            z-index: 1000;
        }

        .modal-content {
            display: flex;
            flex-direction: column;
            background-color: #fefefe;
            margin: 3% auto;
            padding: 30px;
            border: 1px solid #888;
            width: 65%;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            font-size: 18px;

        }

        .modal-content label {
            display: block;
            margin-bottom: 10px;
            margin-top: 20px;
            flex-shrink: 0;
            /* Empêche le rétrécissement des labels */
        }

        .modal-content input[type="text"],
        .modal-content input[type="datetime-local"],
        .modal-content textarea {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
            flex-grow: 1;
            /* Permet à l'input de prendre tout l'espace disponible */
        }

        .modal-content input[type="submit"] {
            padding: 10px 20px;
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
        }

        .modal-content input[type="submit"]:hover {
            background-color: #357ab8;
        }

        /* Flexbox pour les éléments du formulaire */
        .eventFormModal>div {
            display: flex;
            align-items: center;
            width: 100%;
        }

        .btnRemoveCalendar {
            width: 10%;
            height: 10%;
        }

        /* Pour les champs date */
        .eventFormModal>div:nth-child(4) {
            flex-direction: row;
        }

        .eventFormModal>div:nth-child(4)>div {
            display: flex;
            width: 100%;
        }

        .eventModel__frequency{
            display: flex;
            flex-direction: column;
        }

        .eventModel__frequency span{
            display :flex;
            flex-direction: row;
        }


        .close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close-btn:hover,
        .close-btn:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /***** MODAL SETTINGS *****/
        .calendarAssociated {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            width: 100%;
        }

        .calendarAssociated__selected {
            width: 49%;
        }

        .calendarAssociated__add {
            width: 49%;
        }

        .calendarAssociated__list {
            display: flex;
            flex-direction: column;
            border: 1px solid black;
            width: 100%;
            height: 150px;
            overflow-y: scroll;
            gap: 5px;
            list-style-type: none;
            margin: 0;
            padding: 0;
        }

        .calendarAssociated__selected li {
            background: #f1f1f1;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="sidebar">
            <div class="sidebar-header">
                <button id="toggleSidebar">☰</button>
            </div>
            <div class="sidebar-content">
                <a href="/"><button id="createCalendarBtn">Create new calendar</button></a>
                <div id="miniCalendar"></div>
                <h3>My Calendars</h3>
                <ul id="userAllCalendars" class="sidebar-userAllCalendars">
                </ul>
            </div>
        </div>
        <div class="calendar-container">
            <div class="calendar-message" id="message"></div>
            <div id="calendar-nav">
                <button onclick="changeView('dayGridMonth')">Month</button>
                <button onclick="changeView('timeGridWeek')">Week</button>
                <button onclick="changeView('timeGridDay')">Day</button>
            </div>

            <div id='calendar'></div>
        </div>
    </div>


    <div class="modal" id="eventModal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal()">&times;</span>
            <h2>Edit Event</h2>
            <form id="eventForm" class="eventFormModal">
                <div>
                    <input type="hidden" id="calendarId" name="calendarId" disabled>
                    <input type="hidden" id="eventId" name="eventId" disabled >
                </div>
                <div>
                    <label for="summary">Summary:</label>
                    <input type="text" id="summary" name="summary">
                </div>
                <div>
                    <div>
                        <label for="startDate">Start Date:</label>
                        <input type="datetime-local" id="startDate" name="startDate">
                    </div>
                    <div>
                        <label for="endDate">End Date:</label>
                        <input type="datetime-local" id="endDate" name="endDate">
                    </div>
                </div>

                <div class="eventModel__frequency">
                    <fieldset for="frequency">
                        <legend>Frequency</legend>
                        <div>
                            <select id="frequency" name="frequency">
                            <option value="daily">Quotidien</option>
                            <option value="weekly">Hebdomadaire</option>
                            <option value="monthly">Mensuel</option>
                            <option value="bimestriel">Bimestriel</opton>
                            <option value="semestriel">Semestriel</option>
                            <option value="yearly">Annuel</option>
                            </select>
                        </div>
                        <span>
                            <input type="radio" name="each" value="openDay" /><label for="every">Chaque:</label>
                            <input type="number" id="every" name="every" min="1" max="31"><label for="every">jour(s)</label>    
                        </span>
                        
                        <span>
                            <input type="radio" name="each" value="businessDay" /><label for="every">Chaque jour ouvrable</label>
                        </span>

                        <span>
                            <label>Date de fin de récurrence : </label>
                            <input type="date" name="endRecurrence" id="endRecurrence" />
                        </span>
                    </fieldset>
                </div>
                <div>
                    <label for="description">Description:</label>
                    <textarea id="description" name="description"></textarea>
                </div>
                <div>
                    <input type="submit" value="Update Event">
                </div>
            </form>
        </div>
    </div>

    <div class="modal" id="settingsModal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModalSettings()">&times;</span>

            <form method="POST" enctype="application/x-www-form-urlencoded" id="calendarSettings">
                <label>Calendar name :</label><input type="text" name="name" />
                <label>Calendar color :</label><input type="color" name="color" value="#ffffff" />
                <label>Calendar link :</label><input type="text" name="link" />
                <label>Synchronisation : </label><select name="synchronisation">
                    <option value="*/1 * * * *">1 minute</option>
                    <option value="*/5 * * * *">5 minutes</option>
                    <option value="*/15 * * * *">15 minutes</option>
                    <option value="*/30 * * * *">30 minutes</option>
                    <option value="0 */3 * * *">3 hours</option>
                    <option value="0 */12 * * *">12 hours</option>
                    <option value="0 0 * * *">24 hours</option>
                    <option value="0">Never</option>
                </select>
                <label>Calendar visible :</label><select name="class">
                    <option value="PUBLIC">Public</option>
                    <option value="PRIVATE">Private</option>
                </select>
                <div class="calendarAssociated">
                    <div class="calendarAssociated__selected">
                        <label>Calendar associated : </label>
                        <ul id="calendarAssociated" class="calendarAssociated__list">

                        </ul>
                    </div>
                    <div class="calendarAssociated__add">
                        <label>Available calendars : </label>
                        <ul class="calendarAssociated__list" id="calendarAssociated__addNew">

                        </ul>
                    </div>
                </div>
                <input type="submit" value="Submit" />
            </form>
        </div>
    </div>
</body>


<script>
    let fullCalendar;
    let userCalendar
    let currentCalendar
    let user;
    let events
    let divError
    const DOUBLE_CLICK_DELAY = 300;
    let clickTimer = null;

    document.addEventListener('DOMContentLoaded', () => {
        if (localStorage.getItem('token') === null) {
            window.location.href = '/';
        }

        user = <%- JSON.stringify(user) %>;
        userAllCalendars = <%- JSON.stringify(calendars) %>;

        // ajouter une function pour le calendrier par défaut
        currentCalendar = userAllCalendars[0];
        events = getAllEventsFromCalendars(currentCalendar)

        loadUserCalendarList();

        fullCalendar = initializeCalendar(events, userAllCalendars.id);
        divError = document.getElementById('message');
        document.getElementById('createCalendarBtn').addEventListener('click', () => { });
        document.getElementById('toggleSidebar').addEventListener('click', toggleSidebar);

    });

    const loadUserCalendarList = () => {

        if (userAllCalendars.length <= 0) {
            const li = document.createElement('li');
            li.textContent = 'No Calendar Found';
            document.getElementById('userAllCalendars').appendChild(li);
            return;
        }
        userAllCalendars.forEach(calendar => {
            const li = document.createElement('li');
            const a = document.createElement('a');
            a.href = `/users/${user.username}/calendar/${calendar.id}`;
            li.textContent = calendar.name;
            const btn = document.createElement('button');
            const btn2 = document.createElement('button');
            btn.textContent = " Edit";
            btn2.textContent = " Delete";

            if (calendar.children && calendar.children.length > 0) {
                li.textContent += " child : ";
                calendar.children.forEach(children => {
                    li.textContent += children.name + " ";
                })
            }

            li.addEventListener('click', (element) => {
                document.querySelectorAll('.selected').forEach(element => element.classList.remove('selected'))
                li.classList.add('selected');

                currentCalendar = calendar;
                events = getAllEventsFromCalendars(currentCalendar)

                fullCalendar = initializeCalendar(events, userAllCalendars.id);
            });

            btn.addEventListener('click', () => {
                openModalSettings(calendar)
            })

            btn2.addEventListener('click', () => {
                removeCalendar(calendar)
            })

            li.appendChild(btn);
            li.appendChild(btn2);

            li.appendChild(a);
            document.getElementById('userAllCalendars').appendChild(li);
        });
    }

    const getAllEventsFromCalendars = (calendar) => {
        let allEvents = [];

        // Ajouter les événements du calendrier actuel
        if (calendar && calendar.events) {
            allEvents = allEvents.concat(calendar.events);
        }

        // Si le calendrier a des enfants, les traiter récursivement
        if (calendar && calendar.children) {
            for (const child of calendar.children) {
                allEvents = allEvents.concat(getAllEventsFromCalendars(child));
            }
        }

        return allEvents;
    };



    document.getElementById('eventForm').addEventListener('submit', async (data) => {
        data.preventDefault();

        const eventIdInput = document.getElementById('eventId').value;
        const calendarIdInput = document.getElementById('calendarId').value;
        const summaryInput = document.getElementById('summary').value;
        const startDateInput = document.getElementById('startDate').value;
        const endDateInput = document.getElementById('endDate').value;
        const descriptionInput = document.getElementById('description').value;

        if (new Date(startDateInput) >= new Date(endDateInput)) {
            console.log("La date de début doit être inférieure à la date de fin !");
        }


        if (doesEventOverlap(startDateInput, endDateInput)) {
            console.log("Un événement existe déjà pour cette plage horaire!");
        }

        const event = {
            eventId: eventIdInput,
            calendarId: calendarIdInput || currentCalendar.id,
            summary: summaryInput,
            startDate: startDateInput,
            endDate: endDateInput,
            description: descriptionInput,
        };

        await submitEvent(event.calendarId, event);

        closeModal();
    });

    document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
            closeModal();
            closeModalSettings();
        }
    });

    const changeView = (viewName) => {
        fullCalendar.changeView(viewName);
        localStorage.setItem('lastCalendarView', viewName);
    };

    const formatDateToDatetimeLocal = date => {
        const pad = num => {
            const norm = Math.floor(Math.abs(num));
            return (norm < 10 ? '0' : '') + norm;
        };

        return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
    };

    const toggleSidebar = () => {
        const sidebar = document.querySelector('.sidebar');
        const calendarContainer = document.querySelector('.calendar-container');

        if (sidebar.classList.contains('sidebar-collapsed')) {
            sidebar.classList.remove('sidebar-collapsed', 'hide-content');
            calendarContainer.style.width = '80%';
        } else {
            sidebar.classList.add('sidebar-collapsed', 'hide-content');
            calendarContainer.style.width = 'calc(100% - 50px)';
        }
    };

    const updateEvent = async (info) => {
        try {
            const updatedData = {
                id: info.event.id,
                start: info.event.start.toISOString(),
                end: info.event.end.toISOString(),
                summary: info.event.title,
                description: info.event.description
            };

            const response = await fetch(`/api/v1/calendar/${info.event.extendedProps.calendarId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedData)
            });

            if (!response.ok) {
                const data = await response.json();
                throw new Error(data.error);
            }

        }
        catch (error) {
            console.error(error);
            showErrorMessage(error)
            info.revert();
        }
    };

    const submitEvent = async (event) => {
        const eventForm = document.getElementById('eventForm').value;
        const idInput = document.getElementById('eventId').value;
        const summaryInput = document.getElementById('summary').value;
        const startDateInput = document.getElementById('startDate').value;
        const endDateInput = document.getElementById('endDate').value;
        const descriptionInput = document.getElementById('description').value;

        const eventToUpdate = {
            calendarId: event.calendarId || currentCalendar.id,
            id: idInput || null,
            summary: summaryInput,
            start: startDateInput,
            end: endDateInput,
            description: descriptionInput,
        };

        await fetch(`/api/v1/calendar/${currentCalendar.id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(eventToUpdate),
        })

        .then(response => response.json())
        .then(data => {
            closeModal();
        })
        .catch(error => {
            console.error(error);
            showErrorMessage(error)
        });

    };

    const getAllCalendars = async () => {
        const response = await fetch(`/api/v1/calendars`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            }
        })
        const data = await response.json();
        return data;
    }
    //model for setting
    const openModalSettings = async (calendar) => {

        const modal = document.getElementById('settingsModal');
        const formSettings = document.getElementById('calendarSettings');
        const calendarAssociated = document.getElementById('calendarAssociated');
        const calendarAssociated_addNew = document.getElementById('calendarAssociated__addNew');

        let allCalendars = await getAllCalendars();

        let calendarChildren = calendar.children.map(children => children.id)

        if (calendar) {
            formSettings.name.value = calendar.name;
            formSettings.color.value = calendar.color;
            if (calendar.url) {
                formSettings.link.value = calendar.url;
                formSettings.synchronisation.value = calendar.syncExpressionCron;

            } else {
                formSettings.link.disabled = true;
                formSettings.synchronisation.value = 0;
                formSettings.synchronisation.disabled = true;
            }
            formSettings.link.value = calendar.url;
            formSettings.class.defaultSelected = calendar.class;

            if (calendar.type === 'SHARED') {
                currentCalendar.children.forEach(children => {
                    let li = document.createElement('li');
                    li.appendChild(document.createTextNode(children.name));
                    li.setAttribute('calendarId', children.id);

                    let supprimerBtn = document.createElement('button');
                    supprimerBtn.type = 'button';
                    supprimerBtn.appendChild(document.createTextNode('Supprimer'));
                    supprimerBtn.onclick = () => {
                        calendarChildren.splice(calendarChildren.indexOf(children.id), 1);
                        li.remove();

                        // Remettre le calendrier dans calendarAssociated_addNew
                        let liToAdd = document.createElement('li');
                        liToAdd.appendChild(document.createTextNode(children.name));
                        let ajouterBtn = document.createElement('button');
                        ajouterBtn.appendChild(document.createTextNode('Ajouter'));
                        ajouterBtn.type = 'button';
                        ajouterBtn.onclick = () => {
                            calendarChildren.push(children.id);
                            let liSub = document.createElement('li');
                            liSub.appendChild(document.createTextNode(children.name));
                            liSub.setAttribute('calendarId', children.id);
                            liSub.appendChild(supprimerBtn);
                            document.getElementById('calendarAssociated').appendChild(liSub);
                            liToAdd.remove();
                        };
                        liToAdd.appendChild(ajouterBtn);
                        calendarAssociated_addNew.appendChild(liToAdd);
                    };

                    li.appendChild(supprimerBtn);
                    document.getElementById('calendarAssociated').appendChild(li);
                });

                allCalendars
                    .filter(calendar => !calendarChildren.includes(calendar.id))
                    .forEach(calendar => {
                        let li = document.createElement('li');
                        li.appendChild(document.createTextNode(calendar.name));
                        let ajouterBtn = document.createElement('button');
                        ajouterBtn.appendChild(document.createTextNode('Ajouter'));
                        ajouterBtn.type = 'button';
                        ajouterBtn.onclick = () => {
                            if (!calendarChildren.includes(calendar.id)) {
                                calendarChildren.push(calendar.id);
                                let liSub = document.createElement('li');
                                liSub.appendChild(document.createTextNode(calendar.name));
                                liSub.setAttribute('calendarId', calendar.id);

                                let supprimerBtn = document.createElement('button');
                                supprimerBtn.type = 'button';
                                supprimerBtn.appendChild(document.createTextNode('Supprimer'));
                                supprimerBtn.onclick = () => {
                                    calendarChildren.splice(calendarChildren.indexOf(calendar.id), 1);
                                    liSub.remove();
                                    // Remettre le calendrier dans calendarAssociated_addNew
                                    calendarAssociated_addNew.appendChild(li);
                                };
                                liSub.appendChild(supprimerBtn);
                                document.getElementById('calendarAssociated').appendChild(liSub);
                                li.remove();
                            }
                        };
                        li.appendChild(ajouterBtn);
                        calendarAssociated_addNew.appendChild(li);
                    });
            }

        }
        modal.style.display = 'flex';

        formSettings.addEventListener("submit", async (e) => {
            e.preventDefault();

            let data = {
                name: formSettings.name.value,
                color: formSettings.color.value,
                url: formSettings.link.value,
                class: formSettings.class.value,
                childrens: calendarChildren,
                syncExpressionCron: formSettings.synchronisation.value
            };

            try {
                const response = await fetch(`/users/${user.username}/calendars/${currentCalendar.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ calendar: data })
                })
                    .then(responses => responses.json())
                    .then(data => {
                        closeModalSettings();
                    })
            } catch (error) {
                console.error(error);
                showErrorMessage(error)
            }

            e.target.reset();
            closeModalSettings();

        });
    };

    const removeCalendar = async (calendar) => {
        console.log(calendar)
        await fetch(`/api/v1/calendar/${calendar.id}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json'
            }
        })
    };

    const openModal = async (eventOrDate) => {
        const modal = document.getElementById('eventModal');
        const calendarIdInput = document.getElementById('calendarId');
        const eventIdInput = document.getElementById('eventId');
        const summaryInput = document.getElementById('summary');
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');
        const descriptionInput = document.getElementById('description');
        const eventForm = document.getElementById('eventForm');

        calendarIdInput.value = currentCalendar.id;
        eventIdInput.value = eventOrDate.id || null;
        summaryInput.value = eventOrDate.title || '';
        startDateInput.value = formatDateToDatetimeLocal(eventOrDate.start || new Date(eventOrDate));
        endDateInput.value = formatDateToDatetimeLocal(eventOrDate.end || new Date(eventOrDate));
        eventOrDate.extendedProps?.description === undefined ? descriptionInput.placeholder = 'Your description here' : descriptionInput.value = eventOrDate.extendedProps.description;

        modal.style.display = 'flex';
    };

    const closeModal = () => {
        const modal = document.getElementById('eventModal');
        const eventData = document.getElementById('eventForm');
        eventData.reset()
        modal.style.display = 'none';
    };

    const closeModalSettings = () => {
        const modal = document.getElementById('settingsModal');
        const settingsData = document.getElementById('calendarSettings');
        const calendarAssociated = document.getElementById('calendarAssociated');
        const calendarAssociated_addNew = document.getElementById('calendarAssociated__addNew');
        calendarAssociated.innerHTML = '';
        calendarAssociated_addNew.innerHTML = '';

        settingsData.reset()
        modal.style.display = 'none';
    }

    const initializeCalendar = (events, calendarId) => {

        const lastView = localStorage.getItem('lastCalendarView') || 'timeGridWeek';

        const calendarEl = document.getElementById('calendar');
        const fullCalendar = new FullCalendar.Calendar(calendarEl, {
            height: 'auto',
            initialView: lastView,
            editable: true,
            selectable: true,
            //timeZone: 'Europe/Zurich',
            firstDay: 1,
            eventColor: currentCalendar?.color ? currentCalendar.color : '#378006',
            eventClick: info => openModal(info.event),
            eventDrop: info => {
                if (currentCalendar.rights !== 'Write') {
                    info.revert();
                    return;
                }
                updateEvent(info);
            },
            eventResize: info => {
                if (currentCalendar.rights !== 'Write') {
                    info.revert();
                    return;
                }
                updateEvent(info);
            },
            dateClick: info => {
                if (currentCalendar.right === 'Read') return;
                if (clickTimer === null) {
                    clickTimer = setTimeout(() => {
                        clickTimer = null;
                    }, DOUBLE_CLICK_DELAY);
                } else {
                    clearTimeout(clickTimer);
                    clickTimer = null;
                    openModal(info.dateStr);
                }
            },
            select: info => openModal(info),
            events:
                events.map(event => ({
                    id: event.id,
                    title: event.summary,
                    start: event.start,
                    end: event.end,
                    calendarId: currentCalendar.id,
                    description: event.description
                }))

        });

        fullCalendar.render();
        return fullCalendar;
    };

    const doesEventOverlap = (startDate, endDate) => {
        const start = startDate;
        const end = endDate;

        return events.some(event => {
            const eventStart = event.start;
            const eventEnd = event.end;
            return (start >= eventStart && start < eventEnd) ||
                (end > eventStart && end <= eventEnd) ||
                (start <= eventStart && end >= eventEnd);
        });
    };

    const showErrorMessage = (message, type = "error") => {
        setTimeout(() => {
            divError.textContent = '';
            divError.style.display = 'none';
        }, 10000);
        if (type === "error") {
            divError.style.background = '#FFCCCC';
        } else {
            divError.style.background = "green";
        }
        divError.style.display = 'block';
        divError.textContent = message;
    };

</script>

</html>