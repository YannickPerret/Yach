<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js"></script>
    <link rel="manifest" href="../manifest.json">

    <style>
        .container {
            display: flex;
            width: 100%;
            height: 100vh;
            overflow-y: hidden;
        }

        /* Sidebar styles */
        .sidebar {
            position: relative;
            width: 15%;
            background-color: #f7f7f7;
            padding: 20px;
            border-right: 1px solid #ddd;
            height: 100vh;
            overflow-y: auto;
        }

        .sidebar-header {
            height: 4%;
        }

        #toggleSidebar {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
        }


        .sidebar-collapsed {
            width: 50px !important;
            overflow: hidden;
        }

        #createCalendarBtn {
            display: block;
            background-color: #4285f4;
            color: #fff;
            border: none;
            padding: 10px 20px;
            margin-bottom: 20px;
            cursor: pointer;
            border-radius: 5px;
            font-size: 16px;
        }

        #createCalendarBtn:hover {
            background-color: #357ab8;
        }

        .sidebar.hide-content .sidebar-content {
            display: none;
        }


        /* Calendar styles */


        .calendar-container {
            width: 85%;
            overflow-y: auto;
            height: calc(100vh - 60px);
            padding-left: 10px;
        }

        #calendar {
            max-width: 100%;
            margin: 0 auto;
        }


        /* Modal styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 40%;
            /* ajustez selon vos besoins */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            font-size: 18px;
        }

        .modal-content label {
            display: block;
            margin-bottom: 10px;
            margin-top: 20px;
        }

        .modal-content input[type="text"],
        .modal-content input[type="datetime-local"] {
            width: 100%;
            padding: 10px;
            margin-top: 5px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }

        .modal-content input[type="submit"] {
            padding: 10px 20px;
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 20px;
        }

        .modal-content input[type="submit"]:hover {
            background-color: #357ab8;
        }


        .close-btn {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close-btn:hover,
        .close-btn:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="sidebar">
            <div class="sidebar-header">
                <button id="toggleSidebar">☰</button>
            </div>
            <div class="sidebar-content">
                <button id="createCalendarBtn">Créer un calendrier</button>
                <div id="miniCalendar"></div>
                <h3>My Calendars</h3>
                <ul id="userCalendars">
                    <!-- Les éléments de liste (li) représentant chaque calendrier seront insérés ici -->
                </ul>
            </div>
        </div>
        <div class="calendar-container">
            <div id="calendar-nav">
                <button onclick="changeView('dayGridMonth')">Month</button>
                <button onclick="changeView('timeGridWeek')">Week</button>
                <button onclick="changeView('timeGridDay')">Day</button>
            </div>

            <div id='calendar'></div>
        </div>
    </div>


    <div class="modal" id="eventModal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal()">&times;</span>
            <h2>Edit Event</h2>
            <form id="eventForm">
                <label for="calendarId">Calendar ID:</label>
                <input type="text" id="calendarId" name="calendarId" disabled>
                <label for="eventId">Event ID:</label>
                <input type="text" id="eventId" name="eventId" disabled>
                <label for="summary">Summary:</label>
                <input type="text" id="summary" name="summary">
                <label for="startDate">Start Date:</label>
                <input type="datetime-local" id="startDate" name="startDate">
                <label for="endDate">End Date:</label>
                <input type="datetime-local" id="endDate" name="endDate">
                <input type="submit" value="Update Event">
            </form>
        </div>
    </div>

</body>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        const calendarData = <%- JSON.stringify(calendar) %>;
        const events = calendarData.events;

        console.log(calendarData);

        const fullCalendar = initializeCalendar(events, calendarData.id);
        loadUserCalendars();

        document.getElementById('createCalendarBtn').addEventListener('click', () => { });
        document.getElementById('toggleSidebar').addEventListener('click', toggleSidebar);
    });

    const DOUBLE_CLICK_DELAY = 300;
    let clickTimer = null;

    const changeView = viewName => {
        fullCalendar.changeView(viewName);
    };

    const formatDateToDatetimeLocal = date => {
        const pad = num => {
            const norm = Math.floor(Math.abs(num));
            return (norm < 10 ? '0' : '') + norm;
        };

        return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
    };

    const loadUserCalendars = () => {
        const mockCalendars = [
            { id: '1', name: 'Work' },
            { id: '2', name: 'Personal' },
        ];
        const calendarList = document.getElementById('userCalendars');

        mockCalendars.forEach(calendar => {
            const li = document.createElement('li');
            li.textContent = calendar.name;
            calendarList.appendChild(li);
        });
    };

    const toggleSidebar = () => {
        const sidebar = document.querySelector('.sidebar');
        const calendarContainer = document.querySelector('.calendar-container');

        if (sidebar.classList.contains('sidebar-collapsed')) {
            sidebar.classList.remove('sidebar-collapsed', 'hide-content');
            calendarContainer.style.width = '80%';
        } else {
            sidebar.classList.add('sidebar-collapsed', 'hide-content');
            calendarContainer.style.width = 'calc(100% - 50px)';
        }
    };

    const openModal = eventOrDate => {
        const modal = document.getElementById('eventModal');
        const calendarIdInput = document.getElementById('calendarId');
        const eventIdInput = document.getElementById('eventId');
        const summaryInput = document.getElementById('summary');
        const startDateInput = document.getElementById('startDate');
        const endDateInput = document.getElementById('endDate');

        if (eventOrDate instanceof Date || typeof eventOrDate === 'string') {
            summaryInput.value = "";
            startDateInput.value = formatDateToDatetimeLocal(new Date(eventOrDate));
            endDateInput.value = formatDateToDatetimeLocal(new Date(eventOrDate));
        } else {
            calendarIdInput.value = eventOrDate.extendedProps.calendarId;
            eventIdInput.value = eventOrDate.id;
            summaryInput.value = eventOrDate.title;
            startDateInput.value = formatDateToDatetimeLocal(eventOrDate.start);
            endDateInput.value = formatDateToDatetimeLocal(eventOrDate.end);
        }

        modal.style.display = 'block';
    };

    const closeModal = () => {
        const modal = document.getElementById('eventModal');
        modal.style.display = 'none';
    };

    const initializeCalendar = (events, calendarId) => {
        const calendarEl = document.getElementById('calendar');
        const fullCalendar = new FullCalendar.Calendar(calendarEl, {
            height: 'auto',
            initialView: 'dayGridMonth',
            editable: true,
            selectable: true,
            timeZone: 'Europe/Zurich',
            firstDay: 1,
            eventClick: info => openModal(info.event),
            eventDrop: async info => {
                try {
                    const updatedData = {
                        id: info.event.id,
                        start: info.event.start.toISOString(),
                        end: info.event.end.toISOString(),
                        summary: info.event.title
                    };

                    const response = await fetch(`/api/v1/calendar/${info.event.extendedProps.calendarId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(updatedData)
                    });

                    const data = await response.json();

                    if (response.status !== 200) {
                        console.error(data.error);
                        info.revert();
                    }
                } catch (err) {
                    console.error('Erreur lors de la mise à jour de l\'événement', err);
                }
            },
            dateClick: info => {
                if (clickTimer === null) {
                    clickTimer = setTimeout(() => {
                        clickTimer = null;
                    }, DOUBLE_CLICK_DELAY);
                } else {
                    clearTimeout(clickTimer);
                    clickTimer = null;
                    openModal(info.dateStr);
                }
            },
            events: events.map(event => ({
                id: event.id,
                title: event.summary,
                start: event.start,
                end: event.end,
                calendarId: calendarId
            }))
        });

        fullCalendar.render();
        return fullCalendar;
    };

</script>

</html>