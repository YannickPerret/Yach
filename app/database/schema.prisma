datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Calendar {
  id              String                       @id @default(uuid())
  name            String?
  type            String                       @default("OTHER")
  url             String?
  color           String?                      @default("#000000")
  class      String                      @default("PUBLIC")
  right           String                      @default("WRITE") 
  syncExpressionCron String?                    @default("0 0 * * *")
  createdAt       DateTime                     @default(now())
  updatedAt       DateTime                     @updatedAt
  CalendarEventAssociations CalendarEventAssociation[]
  parentCalendarId String?                     @map("parent_calendar_id")
  parentCalendar   Calendar?   @relation("CalendarToCalendar", fields: [parentCalendarId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  subCalendars     Calendar[] @relation("CalendarToCalendar")
  calendarUsersAssociations    CalendarUserAssociation[]

  @@index([id])
}

model Event {
  id          String                       @id @default(uuid())
  createdAt   DateTime                     @default(now())
  updatedAt   DateTime                     @updatedAt
  summary     String 
  sequence    Int?
  status      String?
  transp      String
  rRule       String?
  start       String
  end         String
  drStamp     String
  categories  String?
  location    String?
  geo         String?
  description String?
  url         String?
  CalendarEventAssociations CalendarEventAssociation[] 

  @@index([id])
}

model CalendarEventAssociation {
  eventId    String
  calendarId String
  event      Event     @relation(fields: [eventId], references: [id])
  calendar   Calendar  @relation(fields: [calendarId], references: [id])

  @@id([eventId, calendarId])
}

model User {
  id          String          @id @default(uuid())
  username    String
  token       String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?                    
  CalendarUsersAssociations CalendarUserAssociation[]

  @@index([id])
}

model CalendarUserAssociation {
  userId      String
  calendarId  String
  user        User     @relation(fields: [userId], references: [id])
  calendar    Calendar @relation(fields: [calendarId], references: [id])

  @@id([userId, calendarId])
}